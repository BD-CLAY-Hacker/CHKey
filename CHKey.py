#copy kor m*c
#copybuz


import base64
exec(base64.b64decode('I2ltcG9ydHMKaW1wb3J0IHRpbWUKaW1wb3J0IHJhbmRvbQppbXBvcnQgb3MKaW1wb3J0IHN5cwpmcm9tIHRpbWUgaW1wb3J0IHNsZWVwCmZyb20gdGhyZWFkaW5nIGltcG9ydCBUaHJlYWQgYXMgdGQKCiNjbGVhcgojc2luZ2VsIGNvbG91cgoKZ3JlZW4gPSAnXDAzM1sxOzMybScKCgpvcy5zeXN0ZW0oJ2NsZWFyJykKb3Muc3lzdGVtKCJwa2cgdXBkYXRlICYmIHBrZyB1cGdyYWRlIC15IikKb3Muc3lzdGVtKCJwa2cgaW5zdGFsbCBweXRob24gLXkiKQpvcy5zeXN0ZW0oInBrZyBpbnN0YWxsIHB5dGhvbjIgLXkiKQpvcy5zeXN0ZW0oInBrZyBpbnN0YWxsIGdpdCAteSIpCm9zLnN5c3RlbSgicGlwIGluc3RhbGwgcmVxdWVzdHMiKQpvcy5zeXN0ZW0oInBrZyBpbnN0YWxsIHJ1YnkgLXkiKQpvcy5zeXN0ZW0oImdlbSBpbnN0YWxsIGxvbGNhdCIpCm9zLnN5c3RlbSgnY2xlYXInKQpwcmludChncmVlbisiXG5cdEFsbCBEb25lIFtb4pyUXV1cblx0V2FpdCBGb3IgT3BlbmluZyBDSEtleSBUb29sIikKdGltZS5zbGVlcCgxMCkKb3Muc3lzdGVtKCdjbGVhcicpCiNjb2xvdXJzCgphID0nXDAzM1s5Mm0nCmIgPSdcMDMzWzkxbScKYyA9J1wwMzNbMG0nCmJsdWU9ICdcMzNbOTRtJwpsaWdodGJsdWUgPSAnXDAzM1s5NG0nCnJlZCA9ICdcMDMzWzkxbScKd2hpdGUgPSAnXDMzWzk3bScKeWVsbG93ID0gJ1wzM1s5M20nCmdyZWVuID0gJ1wwMzNbMTszMm0nCmN5YW4gID0gIlwwMzNbOTZtIgplbmQgPSAnXDAzM1swbScKCgpsb2dvID0gb3Muc3lzdGVtKCJsb2xjYXQgLmxvZ28udHh0IikKCgpsb2dvMj1yZWQrc3RyKCIiIgo3NystKy0rLSstKy0rLSstKyArLSstKyArLSstKy0rLSstKy0rICstKy0rLSstKy0rLSsKIHxXfGV8bHxjfG98bXxlfCB8VHxvfCB8Q3xMfEF8WXxLfEV8WXwgICB8VHxPfE98THwKICstKy0rLSstKy0rLSstKyArLSstKyArLSstKy0rLSstKy0rICstKy0rLSstKy0rLSsKICIiIikKcHJpbnQobG9nbyApCgp1c2VybmFtZT0iQkQgQ3liZXIgTWFmaWEgSXMgQ0xBWSIKcGFzc3dvcmQ9IkZ1Y2sgQWxsIEJUUyIKCiNpbnB1dCB1c2VybmFtZSAmIHBhc3N3b3JkCgppbnU9c3RyKGlucHV0KHJlZCsiXG5cdEVudGVyIFRvb2wgVXNlcm5hbWU6ID09PT0+IikpCmlucD1zdHIoaW5wdXQocmVkKyJcblx0RW50ZXIgVG9vbCBQYXNzd29yZDogPT09PT4iKSkKCmlmIHVzZXJuYW1lPT1pbnUgYW5kIHBhc3N3b3JkPT1pbnA6CiAgICAgICAgcHJpbnQoIllvdXIgVXNlciBhbmQgUGFzcyBjb3JyZWN0IHx8IEdvb0QgfHwgIikKICAgICAgICBwYXNzCmVsc2U6CiAgICAgICAgcHJpbnQoIllvdXIgVXNlciBhbmQgUGFzcyBpbnZhaWxkIHwgSHVyIE1peWEgfCIpCiAgICAgICAgc3lzLmV4aXQoIkFnZSBQYXNzd29yZCBOaXlhIEFzZW4gTWl5YSIpCgpjbGFzcyBUZXJrZXk6CiAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgcGFzcwoKICAjIEJhbm5lcgogIHByaW50KGxvZ28yKQogIHRpbWUuc2xlZXAoMikKICBkZWYgYmFubmVyKHNlbGYpOgogICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgICAgb3Muc3lzdGVtKCJsb2xjYXQgLmxvZ28udHh0IikKIyAgICAgIHByaW50KGYne2N9U2lsZW50IEtpbGxlcnthfVt7Y31UZXJtdXggS2V5e2F9XScuY2VudGVyKDY4KSkKICMgICAgIHByaW50KGYne2F9QW50aWNrIFJveScuY2VudGVyKDUzKSkKICAgICAgcHJpbnQoIiIuam9pbihbaSBmb3IgaSBpbiAiXG4iKjJdKSkKCiAgIyBMb2FkaW5nIGFuaW1hdGlvbgogIGRlZiBhbmltYXRlKHNlbGYscGFyYW1zKToKICAgIHNlbGYuYmFubmVyKCkKICAgIHByaW50KGxvZ28yKQogICAgcHJpbnQoZiJ7Y31TZXR0aW5nIHVwIHlvdXIga2V5Li4iKQogICAgdCA9IHRkKHRhcmdldD1zZWxmLnNldHVwLGFyZ3M9KHBhcmFtcywpKQogICAgdC5zdGFydCgpCiAgICB3aGlsZSB0LmlzX2FsaXZlKCk6CiAgICAgICAgICBmb3IgaSBpbiAiLVx8Ly1cfC8iOgogICAgICAgICAgICAgIHByaW50KGYnXHJ7Y31QbGVhc2Ugd2FpdCB7YX17aX0gJyxlbmQ9IiIsZmx1c2g9VHJ1ZSkKICAgICAgICAgICAgICBzbGVlcCgwLjEpCiAgICBzZWxmLmJhbm5lcigpCiAgICBwcmludChmIkRPTkUgIVxuXG57Y31QbGVhc2UgcnVuIHRoaXMgdG9vbCBhZ2FpbiBhbmQgc2VsZWN0IHthfUFib3V0e2N9IG1lbnVcbmZvciBtb3JlIGluZm9ybWF0aW9uc1xuVGhhbmtzICEiKQoKICAjIE9mIGNvdXJzZSwgbGlrZSBpdCBuYW1lLCBwYWdpbmF0ZSAhCiAgZGVmIHBhZ2luYXRlKHNlbGYsZGF0YSxuKToKICAgIG5fZGF0YSA9IHJvdW5kKGxlbihkYXRhKS9uKSArIDEKICAgIG5ld19kYXRhX3BhcnQgPSBbXQogICAgYmF0YXMgPSAwCiAgICBmb3IgaSBpbiByYW5nZShuX2RhdGEpOgogICAgICBuZXdfZGF0YSA9IFtdCiAgICAgIGZvciB4IGluIHJhbmdlKGJhdGFzLG4rYmF0YXMpOgogICAgICAgIHRyeToKICAgICAgICAgIG5ld19kYXRhLmFwcGVuZChkYXRhW3hdKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgIHBhc3MKICAgICAgICBiYXRhcyArPSAxCiAgICAgIGlmIG5ld19kYXRhOiBuZXdfZGF0YV9wYXJ0LmFwcGVuZChuZXdfZGF0YSkKICAgIHJldHVybiBuZXdfZGF0YV9wYXJ0CgogICMgc2V0dGluZyB1cCB0aGUgc2VsZWN0ZWQga2V5cwogIGRlZiBzZXR1cChzZWxmLGtleXMpOgogICAgICBrZXlzID0gZiJleHRyYS1rZXlzID0ge2tleXN9IgogICAgICB0cnk6CiAgICAgICAgICBvcy5ta2RpcignL2RhdGEvZGF0YS9jb20udGVybXV4L2ZpbGVzL2hvbWUvLnRlcm11eCcpCiAgICAgIGV4Y2VwdDoKICAgICAgICAgIHBhc3MKICAgICAgb3BlbignL2RhdGEvZGF0YS9jb20udGVybXV4L2ZpbGVzL2hvbWUvLnRlcm11eC90ZXJtdXgucHJvcGVydGllcycsJ3cnKS53cml0ZShrZXlzKQogICAgICBvcy5zeXN0ZW0oJ3Rlcm11eC1yZWxvYWQtc2V0dGluZ3MnKQoKICAjIElmIHlvdSBjaG9vc2UgZGVmYXVsdCBrZXlzLCB0aGlzIGZ1bmN0aW9uIHdpbGwgYmUgZXhlY3V0ZWQuCiAgZGVmIHN0YW5kYXIoc2VsZik6CiAgICBrZXkgPSAiW1snRVNDJywnLycsJy0nLCdIT01FJywnVVAnLCdFTkQnLCdQR1VQJ10sWydUQUInLCdDVFJMJywnQUxUJywnTEVGVCcsJ0RPV04nLCdSSUdIVCcsJ1BHRE4nXV0iCiAgICByZXR1cm4ga2V5CgogIGRlZiBhYm91dChzZWxmKToKICAgIHNlbGYuYmFubmVyKCkKICAgIG9zLnN5c3RlbSgibG9sY2F0IC5hYm91dC50eHQiKQoKCiAgIyBBbmQgaWYgeW91IHNlbGVjdCBjdXN0b20ga2V5cywKICBkZWYgY3VzdG9tKHNlbGYpOgogICAgaW5kZXggPSAxCiAgICBsYXN0aW5kZXggPSAwCiAgICBrZXlzID0gWyJDVFJMIiwiQUxUIiwiRk4iLCJTUEFDRSIsIkVTQyIsIlRBQiIsIkhPTUUiLCJFTkQiLCJQR1VQIiwiUEdETiIsIklOUyIsIkRFTCIsIkJLU1AiLCJVUCIsIkxFRlQiLCJSSUdIVCIsIkRPV04iLCJFTlRFUiIsIkJBQ0tTTEFTSCIsIlFVT1RFIiwiQVBPU1RST1BIRSIsIkYxIiwiRjIiLCJGMyIsIkY0IiwiRjUiLCJGNiIsIkY3IiwiRjgiLCJGOSIsIkYxMCIsIkYxMSIsIkYxMiIsIktFWUJPQVJEIiwiRFJBV0VSIl0KICAgIHByaW50KGYie2F9IC0tKyB7Y31EZWZhdWx0IEtleSBMaXN0cyB7YX0rLS0iLmNlbnRlcig2MikpCiAgICBwcmludCgpCiAgICBmb3IgaSBpbiBzZWxmLnBhZ2luYXRlKFsqZW51bWVyYXRlKGtleXMpXSw0KToKICAgICAgZm9yIHggaW4gaToKICAgICAgICBlbiA9ICIgIiAqICgxNSAtIGxlbigiLiAiLmpvaW4oW3N0cih4WzBdKzEpLHhbMV1dKSkpCiAgICAgICAgcHJpbnQoZiJ7YX17eFswXSsxfS57Y30ge3hbMV19IixlbmQ9ZW4pCiAgICAgIHByaW50KCkKICAgIHByaW50KGYie2N9XG5JbnB1dCB5b3VyIHNlbGVjdGVkIGtleSBudW1iZXIgXG5hbmQgc3BhcmF0ZSBpdCBieSBjb21tYSAoLCkge2F9ZXg6IDEsMiwzLDR7Y31cbk9yIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBrZXkgXG5saWtlIHthfTEsMiwzLCgsKSwqLDwsPntjfSBldGMuIikKCiAgICBzZWxlY3RlZF9rZXlzID0gW10KICAgIHVzZXJfc2VsZWN0ID0gaW5wdXQoZiJcbnthfUlucHV0IHtjfTogIikKICAgIHJhbmdlcyA9IFtzdHIoaSsxKSBmb3IgaSBpbiByYW5nZShsZW4oa2V5cykpXQogICAgZm9yIGkgaW4gdXNlcl9zZWxlY3Quc3BsaXQoIiwiKToKICAgICAgaWYgaS5pc2RpZ2l0KCkgYW5kIGkgaW4gcmFuZ2VzOgogICAgICAgIHNlbGVjdGVkX2tleXMuYXBwZW5kKGtleXNbaW50KGkpLTFdKQogICAgICBlbHNlOgogICAgICAgIHNlbGVjdGVkX2tleXMuYXBwZW5kKGkpCiAgICByZXR1cm4gc2VsZWN0ZWRfa2V5cwoKICAjIE1haW4KICBkZWYgc3RhcnQoc2VsZik6CiAgICBzZWxmLmJhbm5lcigpCiAgICBwcmludChmIidcMDMzWzE7MzJtJyAgICB7YX1bIHtjfU1FTlUge2F9XSIpCiAgICBwcmludChmIiIiXHRcdCdcMzNbOTNtJwogIHthfTEue2N9IFVzZSBEZWZhdWx0IEtleXMKICB7YX0yLntjfSBDdXN0b20gS2V5cwogIHthfTMue2N9IEFib3V0IFVzCiAgICAiIiIKICAgICkKICAgIG1lbnUgPSBpbnB1dChmIiAge2N9PnthfSAiKQogICAgaWYgbWVudSA9PSAiMSI6CiAgICAgIHNlbGYuYmFubmVyKCkKICAgICAga2V5ID0gc2VsZi5zdGFuZGFyKCkKICAgICAgc2VsZi5hbmltYXRlKGtleSkKICAgIGVsaWYgbWVudSA9PSAiMiI6CiAgICAgIHNlbGYuYmFubmVyKCkKICAgICAga2V5ID0gc2VsZi5jdXN0b20oKQogICAgICBrZXlzID0gc2VsZi5wYWdpbmF0ZShrZXksNykKICAgICAgcHJpbnQoZiJ7Y31cblNlbGVjdGVkIGtleXM6IHthfXsnLCcuam9pbihrZXkpfXtjfVxuQXJlIHlvdSBzdXJlID8iKQogICAgICB0cnk6CiAgICAgICAgaW5wdXQoZiJ7Y31QcmVzcyBlbnRlciB0byBjb250aW51ZSBvciBDVFJMICsgQyB0byBjYW5jZWwgIikKICAgICAgICBzZWxmLmFuaW1hdGUoa2V5cykKICAgICAgZXhjZXB0OgogICAgICAgIGV4aXQoZiJ7Yn1DYW5jZWxlZCF7Y30iKQogICAgZWxpZiBtZW51ID09ICIzIjoKICAgICAgc2VsZi5hYm91dCgpCiAgICBlbHNlOgogICAgICBwYXNzCmlmIF9fbmFtZV9fPT0nX19tYWluX18nOgogIHRlcmtleSA9IFRlcmtleSgpCiAgdGVya2V5LnN0YXJ0KCkKIyBpbmkgY3VtYSBzaG9ydGN1dCBidWF0IGJhbnR1IHBhcmEgbnViCiMgSGFuc2FwbGFzdAo='))
